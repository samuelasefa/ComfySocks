@model ComfySocks.Models.Issue.StoreIssue
@{
    ViewBag.Title = "New Issue Entry";
}

<div class="box box-body box-warning">
    @using (Html.BeginForm("NewIssueEntry", "Issue", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            <div class="col-md-4">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.ItemID, "Item", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownList("ItemID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ItemID, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                        @Html.LabelFor(model => model.StoreID, "Store Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("StoreID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.StoreID, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="AddToList" class="btn btn-default" />
                    </div>
                </div>
            </div>
            <div class="col-sm-8">
                <div style=" background-color:#34495e; color:white; padding:10px">PurchaseItem</div>
                @********table here***********@
                <div id="" class="tablecontainer" style="height:260px; overflow-y:scroll; border:1px solid #BFAEAE">
                    @if (ViewBag.storeIssues != null)
                    {
                        <table class="table table-border table-striped" id="dtaTable">
                            <thead>
                                <tr>
                                    <th>ItemCode</th>
                                    <th>Description</th>
                                    <th>Unit</th>
                                    <th>Quantity</th>
                                    <th>UnitPrice</th>
                                    <th>TotalPrice</th>
                                    <th><i class="glyphicon glyphicon-trash"></i></th>
                                </tr>
                            </thead>
                            
                            @foreach (ComfySocks.Models.Issue.StoreIssue si in ViewBag.storeIssues)
                            {
                                float TotalPrice = 0;
                                ComfySocks.Models.ApplicationDbContext db = new ComfySocks.Models.ApplicationDbContext();
                            <tr>
                                
                                <td>@{var item = db.Items.Find(si.ItemID); }@item.Code</td>
                                <td>@item.Name &nbsp; @item.ItemType.Name</td>
                                <td>@item.Unit.Name</td>
                                <td>@si.Quantity</td>
                                <td>@si.UnitPrice</td>
                                <td>@(TotalPrice += (float)(si.UnitPrice * si.Quantity))</td>
                                <td>@Html.ActionLink(" ", "RemoveSelected", new { id = si.ID}, new { @class = "fa fa-remove" })</td>
                            </tr>
                            }
                        </table>
                    }
                </div>
                <br />
                <div>
                    <a class="btn btn-primary pull-right" href="~/Issue/NewStoreIssueInfo">
                        Next&nbsp;<span class="glyphicon glyphicon-triangle-right"></span>
                    </a>
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "IssueList")
    </div>
    <hr />
</div>

<script src="~/Scripts/sweetalert.js"></script>
<script src="~/Scripts/sweetalert.min.js"></script>
<link href="~/Scripts/sweetalert.css" rel="stylesheet" />


@if (ViewBag.errorMessage != null)
{
    <script>
                window.onload = function () {
                    sweetAlert("error", "@ViewBag.errorMessage", "error");
                    return false;
                }
    </script>

}
@if (ViewBag.succsessMessage != null)
{
    <script>
                window.onload = function () {
                    sweetAlert("success", "@ViewBag.succsessMessage", "success");
                    return false;
                }
    </script>
}
