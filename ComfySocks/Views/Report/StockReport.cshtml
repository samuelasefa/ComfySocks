@model IEnumerable<ComfySocks.Models.Items.Item>

@{

    ViewBag.Title = "Purchase Report";
}
@{ 
    ComfySocks.Models.ApplicationDbContext db = new ComfySocks.Models.ApplicationDbContext();
}
@*<link href="~/Scripts/DataTables/Buttons-1.6.1/css/buttons.dataTables.min.css" rel="stylesheet" />*@
<div class="box box-info box-body">
    @*<table border="0">
        <tbody class="row" style="text-align:center">
            <tr class="col-md-6">
                <td>From Date:</td>
                <td><input type="text" id="fromDate" name="fromdate" class="form-control datepicker"></td>
            </tr>
            <tr class="col-md-6">
                <td>To Date:</td>
                <td><input type="text" id="toDate" name="todate" class="form-control datepicker"></td>
            </tr>
        </tbody>
    </table>*@
    <table class="table table-bordered table-striped" id="dtaTable">
        <thead>
            <tr>
                <th>
                    No.
                </th>
                <th>
                    Description
                </th>
                <th>
                    ItemType
                </th>
                <th>
                    Item Code
                </th>
                <th>
                    Unit
                </th>
                <th>
                    Quantity
                </th>
            </tr>
        </thead>
        @{
            int i = 1;
        }
        @foreach (var item in Model)
        {
            <tr>
                 
                <td>
                    @Html.Raw(i++)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.ItemType.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Code)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Unit.Name)
                </td>
                <td>
                    @try
                    {
                        var items = db.AvaliableOnStocks.FirstOrDefault();

                        @items.Avaliable
                    }
                    catch
                    {
                        <h5>0</h5>
                    }
                </td>
            </tr>
        }

    </table>


</div>
@*<script src="~/Scripts/jquery-3.3.1.js"></script>*@
@*<script src="~/Scripts/DataTables/DataTables-1.10.9/js/jquery.dataTables.min.js"></script>*@
<script src="~/Scripts/DataTables/Buttons-1.6.1/js/dataTables.buttons.min.js"></script>
<script src="~/Scripts/DataTables/Buttons-1.6.1/js/buttons.flash.min.js"></script>
<script src="~/Scripts/DataTables/JSZip-2.5.0/jszip.min.js"></script>
<script src="~/Scripts/DataTables/pdfmake-0.1.36/pdfmake.min.js"></script>
<script src="~/Scripts/DataTables/pdfmake-0.1.36/vfs_fonts.js"></script>
<script src="~/Scripts/DataTables/Buttons-1.6.1/js/buttons.html5.js"></script>
<script src="~/Scripts/DataTables/Buttons-1.6.1/js/buttons.print.js"></script>

<script>
    $("#dtaTable").DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            {
                extend: 'copy',
                className: 'copyButton',
                text: '<i class="fa fa-clone"></i> Copy'
            },
            {
                extend: 'excel',
                text: '<i class="fa fa-file-excel-o"></i> Excel'
            },
            {
                extend: 'pdf',
                text: '<i class="fa fa-file-pdf-o"></i> Pdf'
            },
            {
                extend: 'print',
                text: '<i class="fa fa-print"></i> Print'
            }
        ]
    });
        //datepicker
        $(function () {
            $(".datepicker").datepicker({
                format: 'MM-dd-yyyy'
            });
    });
    ////Customer filltering
    ///* Custom filtering function which will search data in column four between two values */
    //$.fn.dataTable.ext.search.push(
    //    function (settings, data) {
    //        var fromDate = parseInt($('#fromDate').val(), 10);
    //        var toDate = parseInt($('#toDate').val(), 10);
    //        var date = parseFloat(data[0]) || 0; // use data for the age column

    //        if ((isNaN(fromDate) && isNaN(toDate)) ||
    //            (isNaN(fromDate) && date <= toDate) ||
    //            (fromDate <= date && isNaN(toDate)) ||
    //            (fromDate <= date && date <= toDate)) {
    //            return true;
    //        }
    //        return false;
    //    }
    //);
    //$(document).ready(function () {
    //    var table = $('#dtaTable').DataTable();

    //    // Event listener to the two range filtering inputs to redraw on input
    //    $('#fromDate, #toDate').keyup(function () {
    //        dtaTable.draw();
    //    });
    //});
</script>
